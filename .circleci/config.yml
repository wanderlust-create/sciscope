version: 2.1

orbs:
  node: circleci/node@5

jobs:
  test-node:
    docker:
      - image: circleci/node:14.17.0
      - image: circleci/postgres:12.3
        name: db
        environment:
          POSTGRES_USER: $DB_USER
          POSTGRES_PASSWORD: $DB_PASSWORD
          POSTGRES_DB: $TEST_DB_NAME"
    environment:
      DB_HOST: db
      DB_PORT: 5432
      JEST_JUNIT_OUTPUT_DIR: ./test-results/

    steps:
      - checkout

      # Correctly create .env file with values
      - run:
          name: Create .env file from CircleCI Environment Variables
          command: |
            echo "DB_HOST=db" >> .env
            echo "DB_USER=$DB_USER" >> .env
            echo "DB_PASSWORD=$DB_PASSWORD" >> .env
            echo "TEST_DB_NAME=$TEST_DB_NAME" >> .env
            echo "DB_PORT=5432" >> .env
            echo "NODE_ENV=test" >> .env

      - run:
          name: Load Environment Variables
          command: source .env

      - run:
          name: Verify Environment Variables
          command: cat .env

      # Source .env before installing dependencies
      - run:
          name: Install All Dependencies
          command: >
            source .env &&
            npm install

      # Debugging: Check installed npm packages
      - run:
          name: Check Installed Dependencies
          command: npm list || echo "Dependency list failed"

      - run:
          name: Debug Raw Environment Variables
          command: env | grep DB_
      - run:
          name: Debug Processed Environment Variables
          command: |
                echo "DB_HOST=$DB_HOST"
                echo "DB_USER=$DB_USER"
                echo "DB_PASSWORD=$DB_PASSWORD"
                echo "TEST_DB_NAME=$TEST_DB_NAME"
                echo "DB_PORT=$DB_PORT"
      # Wait for PostgreSQL to be ready
      - run:
          name: Wait for PostgreSQL
          command: |
            for i in $(seq 1 10); do
              nc -z db 5432 && echo "Postgres is up" && exit 0;
              echo "Waiting for Postgres...";
              sleep 2;
            done;
            echo "Postgres did not start in time";
            exit 1

      - run:
          name: Debug Raw Environment Variables
          command: |
            if [ -z "$DB_USER" ]; then
              echo "❌ DB_USER is NOT set!"
            else
              echo "✅ DB_USER is set!"
            fi

            if [ -z "$DB_PASSWORD" ]; then
              echo "❌ DB_PASSWORD is NOT set!"
            else
              echo "✅ DB_PASSWORD is set!"
            fi

            if [ -z "$TEST_DB_NAME" ]; then
              echo "❌ TEST_DB_NAME is NOT set!"
            else
              echo "✅ TEST_DB_NAME is set!"
            fi
      - run:
          name: Debug Environment Variables
          command: |
            echo "DB_USER=$DB_USER"
            echo "DB_PASSWORD=$DB_PASSWORD"
            echo "DB_NAME=$TEST_DB_NAME"

      - run:
        name: Debug PostgreSQL Connection Inside Container
        command: |
          docker exec $(docker ps -q -f name=db) env | grep POSTGRES


      # Source .env before running Knex migrations
      - run:
          name: Run Database Migrations
          command: >
            source .env &&
            npx knex migrate:latest --knexfile ./src/config/knexfile.js

      # Source .env before running tests
      - run:
          name: Run Tests
          command: >
            source .env &&
            npm run test --ci --runInBand --reporters=default --reporters=jest-junit

      # Store test results for CircleCI
      - store_test_results:
          path: ./test-results/

  build-node:
    docker:
      - image: circleci/node:14.17.0
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          command: npm run build
      - run:
          name: Create the ~/artifacts directory if it doesn't exist
          command: mkdir -p ~/artifacts
      - run:
          name: Copy artifacts
          command: cp -R build dist public .output .next .docusaurus ~/artifacts 2>/dev/null || true
      - store_artifacts:
          path: ~/artifacts
          destination: node-build

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: deploy
          command: "#e.g. ./deploy.sh"

workflows:
  build-and-test:
    jobs:
      - test-node
      - build-node:
          requires:
            - test-node
