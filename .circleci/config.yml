version: 2.1

orbs:
  node: circleci/node@5

jobs:
  test-node:
    docker:
      - image: circleci/node:14.17.0
      - image: circleci/postgres:12.3
        environment:
          POSTGRES_USER: $POSTGRES_USER
          POSTGRES_PASSWORD: $POSTGRES_PASSWORD
          POSTGRES_DB: $POSTGRES_DB
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./test-results/

    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm

      # Ensure all dependencies are installed
      - run:
          name: Install All Dependencies
          command: npm install

      # Debugging: Check installed npm packages
      - run:
          name: Check Installed Dependencies
          command: npm list || echo "Dependency list failed"

      # Wait for PostgreSQL to be ready
      - run:
          name: Wait for PostgreSQL
          command: |
            for i in $(seq 1 10); do
              nc -z localhost 5432 && echo "Postgres is up" && exit 0;
              echo "Waiting for Postgres...";
              sleep 2;
            done;
            echo "Postgres did not start in time";
            exit 1

      # Run Knex Migrations
      - run:
          name: Run Database Migrations
          command: npx knex migrate:latest --knexfile ./src/config/knexfile.js

      # Run Tests
      - run:
          name: Run Tests
          command: npm run test --ci --runInBand --reporters=default --reporters=jest-junit

      # Store test results for CircleCI
      - store_test_results:
          path: ./test-results/

  build-node:
    docker:
      - image: circleci/node:14.17.0
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          command: npm run build
      - run:
          name: Create the ~/artifacts directory if it doesn't exist
          command: mkdir -p ~/artifacts
      - run:
          name: Copy artifacts
          command: cp -R build dist public .output .next .docusaurus ~/artifacts 2>/dev/null || true
      - store_artifacts:
          path: ~/artifacts
          destination: node-build

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: deploy
          command: "#e.g. ./deploy.sh"

workflows:
  version: 2
  build-and-test:
    jobs:
      - test-node
      - build-node:
          re
