version: 2.1

orbs:
  node: circleci/node@4.7.0

jobs:
  test-node:
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./test-results/
      DB_HOST: db
    docker:
      - image: cimg/node:16.17
      - image: cimg/postgres:15.1
        name: db
        command: |
          bash -c "
            export POSTGRES_USER=$DB_USER &&
            export POSTGRES_PASSWORD=$DB_PASSWORD &&
            export POSTGRES_DB=$TEST_DB_NAME &&
            docker-entrypoint.sh postgres
          "

    steps:
      - checkout

      - run:
          name: Inject Environment Variables Manually
          command: |
            echo "Manually exporting DB environment variables..."
            echo "export POSTGRES_USER=$DB_USER" >> $BASH_ENV
            echo "export POSTGRES_PASSWORD=$DB_PASSWORD" >> $BASH_ENV
            echo "export POSTGRES_DB=$TEST_DB_NAME" >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Debug Environment Variables
          command: |
            echo "POSTGRES_USER: $POSTGRES_USER"
            echo -n "POSTGRES_USER (hex): "; echo -n "$POSTGRES_USER" | xxd

            echo "POSTGRES_PASSWORD: $POSTGRES_PASSWORD"
            echo -n "POSTGRES_PASSWORD (hex): "; echo -n "$POSTGRES_PASSWORD" | xxd

            echo "POSTGRES_DB: $POSTGRES_DB"
            echo -n "POSTGRES_DB (hex): "; echo -n "$POSTGRES_DB" | xxd

      - run:
          name: Restart Postgres if Needed
          command: docker restart db || true

      - run:
          name: Wait for PostgreSQL to be ready
          command: |
            for i in {1..30}; do
              nc -z db 5432 && echo "Postgres is ready" && exit 0
              echo "Waiting for Postgres..."
              sleep 1
            done
            echo "Postgres failed to start" && exit 1
      - run:
          name: Force Create Database If Missing
          command: |
            echo "Checking if database exists..."
            psql -h db -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = '$POSTGRES_DB';" | grep -q 1 ||
            psql -h db -U postgres -c "CREATE DATABASE $POSTGRES_DB OWNER $POSTGRES_USER;"

      - run:
          name: Verify Postgres Users
          command: |
            psql -h db -U postgres -d "$POSTGRES_DB" -c '\du'
      - run:
          name: Ensure Database Exists
          command: |
            echo "Checking if database exists..."
            psql -h db -U "$POSTGRES_USER" -tc "SELECT 1 FROM pg_database WHERE datname = '$POSTGRES_DB';" | grep -q 1 ||
            psql -h db -U "$POSTGRES_USER" -c "CREATE DATABASE $POSTGRES_DB;"
      - run:
          name: Ensure Knex is Installed Locally
          command: |
            cd ~/project  # Ensure we're in the project directory
            npm install knex


      - run:
          name: Run Database Migrations
          command: npx knex migrate:latest --env test --knexfile ./src/config/knexfile.js

      - run:
          name: Run Tests
          command: npm run test --ci --runInBand --reporters=default --reporters=jest-junit

      - store_test_results:
          path: ./test-results/

      - save_cache:
          key: v1-npm-deps-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm

workflows:
  build-and-test:
    jobs:
      - test-node
