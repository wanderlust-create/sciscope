version: 2.1

jobs:
  test-node:
    docker:
      - image: cimg/node:14.21.3
      - image: circleci/postgres:12.3
        name: db
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: sciscope_test_db
    environment:
      DB_HOST: db
      DB_PORT: 5432
      JEST_JUNIT_OUTPUT_DIR: ./test-results/

    steps:
      - checkout


      - run:
          name: Create .env file
          command: |
            echo "DB_HOST=db" >> .env
            echo "DB_USER=$DB_USER" >> .env
            echo "DB_PASSWORD=$DB_PASSWORD" >> .env
            echo "TEST_DB_NAME=$TEST_DB_NAME" >> .env
            echo "DB_PORT=5432" >> .env
            echo "NODE_ENV=test" >> .env

      - run:
          name: Load Environment Variables
          command: source .env

      - run:
          name: Verify Environment Variables
          command: cat .env

      - run:
          name: Install Dependencies
          command: |
            source .env
            npm install

      - run:
          name: Check Installed Dependencies
          command: npm list || echo "Dependency list failed"

      - run:
          name: Wait for PostgreSQL
          command: |
            for i in $(seq 1 10); do
              nc -z db 5432 && echo "Postgres is up" && exit 0;
              echo "Waiting for Postgres...";
              sleep 2;
            done;
            echo "Postgres did not start in time";
            exit 1

      - run:
          name: Debug Raw Environment Variables
          command: |
            if [ -z "$DB_HOST" ]; then
              echo "❌ DB_HOST is NOT set!"
            else
              echo "✅ DB_HOST is set!"
            fi
            if [ -z "$DB_PASSWORD" ]; then
              echo "❌ DB_PASSWORD is NOT set!"
            else
              echo "✅ DB_PASSWORD is set!"
            fi
            if [ -z "$TEST_DB_NAME" ]; then
              echo "❌ TEST_DB_NAME is NOT set!"
            else
              echo "✅ TEST_DB_NAME is set!"
            fi

      - run:
          name: Install PostgreSQL client (psql)
          command: |
            sudo apt-get update
            sudo apt-get install -y postgresql-client

      - run:
          name: Debug DB Connection with psql
          command: |
            source .env
            PGPASSWORD="$DB_PASSWORD" psql \
              --host="$DB_HOST" \
              --username="$DB_USER" \
              --dbname="$TEST_DB_NAME" \
              --command="SELECT 'Connection successful' as status;"

      - run:
          name: Run Database Migrations
          command: |
            source .env &&
            npx knex migrate:latest --knexfile ./src/config/knexfile.js

      - run:
          name: Run Tests
          command: |
            source .env
            npm run test --ci --runInBand --reporters=default --reporters=jest-junit

      - store_test_results:
          path: ./test-results/

workflows:
  build-and-test:
    jobs:
      - test-node
